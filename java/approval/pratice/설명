즉시로딩 EAGER, 지연로딩 LAZY
즉시 로딩이란 객체A를 조회할 때 A와 관련된 객체들을 한 번에 가져오는것이다.
지연 로딩이란 객체A를 조회할 때는 A만 가져오고 연관된 애들은 저번 게시글에서 본 프락시 초기화 방법으로 가져온다.

즉시 로딩과 지연로딩은 연관관계의 다중에 따라 기본값이 달라진다.
@xTOONE 처럼 ONE으로 끝나는 것들은 기본값이 즉시 로딩이다.
@xTOMANY, @MANYTOMANY 처럼 Many로 끝나는 것들은 기본값이 지연 로딩이다.

# 즉시로딩은 예측이 어렵고, 어떤 sql이 실행될지 추적하기 어렵다. jpql을 실행할 때 N+1 문제가 자주 발생
즉시로딩은 가급적 피하고 지연로딩 사용
한 번에 연관된 엔티티들의 데이터를 조회해야 할 때는 fetch join, 엔티티 그래프기능을 사용한다

@Repository : 스프링 빈으로 등록, JPA 예외를 스프링 기반 예외로 예외 변환
@PersistenceContext : 엔티티 매니저 주입
@PersistenceUnit : 엔티티 매니저 팩토리 주입

@Service
@Transcational : 트랜잭션, 영속성 컨텍스트
*readOnly= true : 데이터의 변경이 없는 읽기 전용 메서드에 사용, 영속성 컨텍스트를 플러시 하지 않으므로 약간의 성능 향상(읽기전용에는 전부 적용)
*데이터베이스 드라이버가 지원하면 DB에서 성능 향상

% 실무에서는 검증 로직이 있어도 멀티 쓰레드 상황을 고려해서 회원테이블의 회원명 컬럼에 유니크 제약 조건을 추가하는것이안전.
% 스프링 필드 주입 대신에 생성자 주입을 사용하자

